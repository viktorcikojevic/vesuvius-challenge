







































































































































































































  1%|▋                                                                                       | 200/26610 [20:25<46:04:49,  6.28s/it]
  0%|                                                                                                        | 0/64 [00:00<?, ?it/s]







































































































































































































































































  1%|█▎                                                                                      | 399/26610 [44:27<45:02:07,  6.19s/it]
  2%|█▎                                                                                      | 400/26610 [44:34<45:26:56,  6.24s/it]







































































































































































































































































  2%|█▉                                                                                    | 600/26610 [1:08:12<44:17:38,  6.13s/it]
  0%|                                                                                                        | 0/64 [00:00<?, ?it/s]







































































































































































































































































  3%|██▌                                                                                   | 800/26610 [1:31:41<43:01:17,  6.00s/it]
  0%|                                                                                                        | 0/64 [00:00<?, ?it/s]






































































































































































































































































  4%|███▏                                                                                 | 1000/26610 [1:55:51<43:32:33,  6.12s/it]
  0%|                                                                                                        | 0/64 [00:00<?, ?it/s]







































































































































































































































































  5%|███▊                                                                                 | 1199/26610 [2:20:32<40:55:21,  5.80s/it]
  5%|███▊                                                                                 | 1200/26610 [2:20:38<40:58:13,  5.80s/it]





























































































































































































































































  5%|████████████                                                                                                                                                                                                                            | 1390/26610 [2:43:11<42:32:20,  6.07s/it]Traceback (most recent call last):
  File "/home/viktor/Documents/kaggle/vesuvius-challenge/tools/train.py", line 137, in <module>
    main(_args.config, _args.work_dir, _args.data_dir)
  File "/home/viktor/Documents/kaggle/vesuvius-challenge/tools/train.py", line 123, in main
    trainer.train()
  File "/home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/transformers/trainer.py", line 1574, in train
    return inner_training_loop(
  File "/home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/transformers/trainer.py", line 1852, in _inner_training_loop
    for step, inputs in enumerate(epoch_iterator):
  File "/home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/accelerate/data_loader.py", line 387, in __iter__
    next_batch = next(dataloader_iter)
  File "/home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 633, in __next__
    data = self._next_data()
  File "/home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/torch/utils/data/dataloader.py", line 677, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "/home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 51, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py", line 51, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/viktor/Documents/kaggle/vesuvius-challenge/src/kaggle_vesuvius/dataloaders.py", line 211, in __getitem__
    frag_crop = (self.fragments_zarr[fragment].volume[:, y1:y2, x1:x2] / 255.0).astype('float32') # "convert" to uint8
  File "/home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/zarr/core.py", line 821, in __getitem__
    result = self.get_basic_selection(pure_selection, fields=fields)
  File "/home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/zarr/core.py", line 947, in get_basic_selection
    return self._get_basic_selection_nd(selection=selection, out=out,
  File "/home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/zarr/core.py", line 990, in _get_basic_selection_nd
    return self._get_selection(indexer=indexer, out=out, fields=fields)
  File "/home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/zarr/core.py", line 1285, in _get_selection
    self._chunk_getitem(chunk_coords, chunk_selection, out, out_selection,
  File "/home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/zarr/core.py", line 2006, in _chunk_getitem
    self._process_chunk(out, cdata, chunk_selection, drop_axes,
  File "/home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/zarr/core.py", line 1949, in _process_chunk
    chunk = self._decode_chunk(cdata)
  File "/home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/zarr/core.py", line 2233, in _decode_chunk
    chunk = self._compressor.decode(cdata)
KeyboardInterrupt
[31m╭─────────────────────────────── [39m[1mTraceback (most recent call last)[31m[22m ────────────────────────────────╮
[31m│[39m /home/viktor/Documents/kaggle/vesuvius-challenge/tools/[1mtrain.py[22m:[94m137[39m in [92m<module>[39m                  [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m   134 │   parser.add_argument([33m"--work-dir"[39m, [96mtype[39m=[96mstr[39m, required=[94mTrue[39m, help=[33m"Path to the working[39m   [31m│
[31m│[39m   135 │   parser.add_argument([33m"--data-dir"[39m, [96mtype[39m=[96mstr[39m, required=[94mTrue[39m, help=[33m"Path to the data di[39m   [31m│
[31m│[39m   136 │   _args, _ = parser.parse_known_args()                                                   [31m│
[31m│[39m [31m❱ [39m137 │   main(_args.config, _args.work_dir, _args.data_dir)                                     [31m│
[31m│[39m   138                                                                                            [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m /home/viktor/Documents/kaggle/vesuvius-challenge/tools/[1mtrain.py[22m:[94m123[39m in [92mmain[39m                      [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m   120 │   )                                                                                      [31m│
[31m│[39m   121 │                                                                                          [31m│
[31m│[39m   122 │   # Perform training                                                                     [31m│
[31m│[39m [31m❱ [39m123 │   trainer.train()                                                                        [31m│
[31m│[39m   124                                                                                            [31m│
[31m│[39m   125                                                                                            [31m│
[31m│[39m   126                                                                                            [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m /home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/transformers/[1mtrainer.py[22m:[94m1574[39m  [31m│
[31m│[39m in [92mtrain[39m                                                                                         [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m   1571 │   │   │   [94mfinally[39m:                                                                      [31m│
[31m│[39m   1572 │   │   │   │   hf_hub_utils.enable_progress_bars()                                       [31m│
[31m│[39m   1573 │   │   [94melse[39m:                                                                             [31m│
[31m│[39m [31m❱ [39m1574 │   │   │   [94mreturn[39m inner_training_loop(                                                   [31m│
[31m│[39m   1575 │   │   │   │   args=args,                                                                [31m│
[31m│[39m   1576 │   │   │   │   resume_from_checkpoint=resume_from_checkpoint,                            [31m│
[31m│[39m   1577 │   │   │   │   trial=trial,                                                              [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m /home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/transformers/[1mtrainer.py[22m:[94m1852[39m  [31m│
[31m│[39m in [92m_inner_training_loop[39m                                                                          [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m   1849 │   │   │   │   rng_to_sync = [94mTrue[39m                                                        [31m│
[31m│[39m   1850 │   │   │                                                                                 [31m│
[31m│[39m   1851 │   │   │   step = -[94m1[39m                                                                     [31m│
[31m│[39m [31m❱ [39m1852 │   │   │   [94mfor[39m step, inputs [95min[39m [96menumerate[39m(epoch_iterator):                                [31m│
[31m│[39m   1853 │   │   │   │   total_batched_samples += [94m1[39m                                                [31m│
[31m│[39m   1854 │   │   │   │   [94mif[39m rng_to_sync:                                                           [31m│
[31m│[39m   1855 │   │   │   │   │   [96mself[39m._load_rng_state(resume_from_checkpoint)                          [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m /home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/accelerate/[1mdata_loader.py[22m:[94m387[39m [31m│
[31m│[39m in [92m__iter__[39m                                                                                      [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m   384 │   │   │   │   # But we still move it to the device so it is done before `StopIteration   [31m│
[31m│[39m   385 │   │   │   │   [94mif[39m [96mself[39m.device [95mis[39m [95mnot[39m [94mNone[39m:                                                [31m│
[31m│[39m   386 │   │   │   │   │   current_batch = send_to_device(current_batch, [96mself[39m.device)             [31m│
[31m│[39m [31m❱ [39m387 │   │   │   │   next_batch = [96mnext[39m(dataloader_iter)                                         [31m│
[31m│[39m   388 │   │   │   │   [94mif[39m batch_index >= [96mself[39m.skip_batches:                                       [31m│
[31m│[39m   389 │   │   │   │   │   [94myield[39m current_batch                                                    [31m│
[31m│[39m   390 │   │   │   │   batch_index += [94m1[39m                                                           [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m /home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/torch/utils/data/[1mdataloader.p[22m [31m│
[31m│[39m [1my[22m:[94m633[39m in [92m__next__[39m                                                                                [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m    630 │   │   │   [94mif[39m [96mself[39m._sampler_iter [95mis[39m [94mNone[39m:                                                [31m│
[31m│[39m    631 │   │   │   │   # TODO(https://github.com/pytorch/pytorch/issues/76750)                   [31m│
[31m│[39m    632 │   │   │   │   [96mself[39m._reset()  # type: ignore[call-arg]                                   [31m│
[31m│[39m [31m❱ [39m 633 │   │   │   data = [96mself[39m._next_data()                                                      [31m│
[31m│[39m    634 │   │   │   [96mself[39m._num_yielded += [94m1[39m                                                        [31m│
[31m│[39m    635 │   │   │   [94mif[39m [96mself[39m._dataset_kind == _DatasetKind.Iterable [95mand[39m \                          [31m│
[31m│[39m    636 │   │   │   │   │   [96mself[39m._IterableDataset_len_called [95mis[39m [95mnot[39m [94mNone[39m [95mand[39m \                    [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m /home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/torch/utils/data/[1mdataloader.p[22m [31m│
[31m│[39m [1my[22m:[94m677[39m in [92m_next_data[39m                                                                              [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m    674 │                                                                                         [31m│
[31m│[39m    675 │   [94mdef[39m [92m_next_data[39m([96mself[39m):                                                                 [31m│
[31m│[39m    676 │   │   index = [96mself[39m._next_index()  # may raise StopIteration                             [31m│
[31m│[39m [31m❱ [39m 677 │   │   data = [96mself[39m._dataset_fetcher.fetch(index)  # may raise StopIteration              [31m│
[31m│[39m    678 │   │   [94mif[39m [96mself[39m._pin_memory:                                                              [31m│
[31m│[39m    679 │   │   │   data = _utils.pin_memory.pin_memory(data, [96mself[39m._pin_memory_device)            [31m│
[31m│[39m    680 │   │   [94mreturn[39m data                                                                       [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m /home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/torch/utils/data/_utils/[1mfetch[22m [31m│
[31m│[39m [1m.py[22m:[94m51[39m in [92mfetch[39m                                                                                  [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m   48 │   │   │   [94mif[39m [96mhasattr[39m([96mself[39m.dataset, [33m"__getitems__"[39m) [95mand[39m [96mself[39m.dataset.__getitems__:         [31m│
[31m│[39m   49 │   │   │   │   data = [96mself[39m.dataset.__getitems__(possibly_batched_index)                    [31m│
[31m│[39m   50 │   │   │   [94melse[39m:                                                                           [31m│
[31m│[39m [31m❱ [39m51 │   │   │   │   data = [[96mself[39m.dataset[idx] [94mfor[39m idx [95min[39m possibly_batched_index]                [31m│
[31m│[39m   52 │   │   [94melse[39m:                                                                               [31m│
[31m│[39m   53 │   │   │   data = [96mself[39m.dataset[possibly_batched_index]                                     [31m│
[31m│[39m   54 │   │   [94mreturn[39m [96mself[39m.collate_fn(data)                                                        [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m /home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/torch/utils/data/_utils/[1mfetch[22m [31m│
[31m│[39m [1m.py[22m:[94m51[39m in [92m<listcomp>[39m                                                                             [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m   48 │   │   │   [94mif[39m [96mhasattr[39m([96mself[39m.dataset, [33m"__getitems__"[39m) [95mand[39m [96mself[39m.dataset.__getitems__:         [31m│
[31m│[39m   49 │   │   │   │   data = [96mself[39m.dataset.__getitems__(possibly_batched_index)                    [31m│
[31m│[39m   50 │   │   │   [94melse[39m:                                                                           [31m│
[31m│[39m [31m❱ [39m51 │   │   │   │   data = [[96mself[39m.dataset[idx] [94mfor[39m idx [95min[39m possibly_batched_index]                [31m│
[31m│[39m   52 │   │   [94melse[39m:                                                                               [31m│
[31m│[39m   53 │   │   │   data = [96mself[39m.dataset[possibly_batched_index]                                     [31m│
[31m│[39m   54 │   │   [94mreturn[39m [96mself[39m.collate_fn(data)                                                        [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m /home/viktor/Documents/kaggle/vesuvius-challenge/src/kaggle_vesuvius/[1mdataloaders.py[22m:[94m211[39m in       [31m│
[31m│[39m [92m__getitem__[39m                                                                                      [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m   208 │   │   x2 = x1 + [96mself[39m.crop_size                                                           [31m│
[31m│[39m   209 │   │   y2 = y1 + [96mself[39m.crop_size                                                           [31m│
[31m│[39m   210 │   │                                                                                      [31m│
[31m│[39m [31m❱ [39m211 │   │   frag_crop = ([96mself[39m.fragments_zarr[fragment].volume[:, y1:y2, x1:x2] / [94m255.0[39m).asty   [31m│
[31m│[39m   212 │   │   mask_crop = ([96mself[39m.fragments_zarr[fragment].label[y1:y2, x1:x2] / [94m255.0[39m).astype([33m'[39m   [31m│
[31m│[39m   213 │   │                                                                                      [31m│
[31m│[39m   214 │   │   # swap axes: [C, H, W] -> [H, W, C]                                                [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m /home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/zarr/[1mcore.py[22m:[94m821[39m in           [31m│
[31m│[39m [92m__getitem__[39m                                                                                      [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m    818 │   │   [94mif[39m is_pure_fancy_indexing(pure_selection, [96mself[39m.ndim):                             [31m│
[31m│[39m    819 │   │   │   result = [96mself[39m.vindex[selection]                                               [31m│
[31m│[39m    820 │   │   [94melse[39m:                                                                             [31m│
[31m│[39m [31m❱ [39m 821 │   │   │   result = [96mself[39m.get_basic_selection(pure_selection, fields=fields)              [31m│
[31m│[39m    822 │   │   [94mreturn[39m result                                                                     [31m│
[31m│[39m    823 │                                                                                         [31m│
[31m│[39m    824 │   [94mdef[39m [92mget_basic_selection[39m([96mself[39m, selection=[96mEllipsis[39m, out=[94mNone[39m, fields=[94mNone[39m):             [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m /home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/zarr/[1mcore.py[22m:[94m947[39m in           [31m│
[31m│[39m [92mget_basic_selection[39m                                                                              [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m    944 │   │   │   [94mreturn[39m [96mself[39m._get_basic_selection_zd(selection=selection, out=out,             [31m│
[31m│[39m    945 │   │   │   │   │   │   │   │   │   │   │   │   fields=fields)                            [31m│
[31m│[39m    946 │   │   [94melse[39m:                                                                             [31m│
[31m│[39m [31m❱ [39m 947 │   │   │   [94mreturn[39m [96mself[39m._get_basic_selection_nd(selection=selection, out=out,             [31m│
[31m│[39m    948 │   │   │   │   │   │   │   │   │   │   │   │   fields=fields)                            [31m│
[31m│[39m    949 │                                                                                         [31m│
[31m│[39m    950 │   [94mdef[39m [92m_get_basic_selection_zd[39m([96mself[39m, selection, out=[94mNone[39m, fields=[94mNone[39m):                  [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m /home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/zarr/[1mcore.py[22m:[94m990[39m in           [31m│
[31m│[39m [92m_get_basic_selection_nd[39m                                                                          [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m    987 │   │   # setup indexer                                                                   [31m│
[31m│[39m    988 │   │   indexer = BasicIndexer(selection, [96mself[39m)                                           [31m│
[31m│[39m    989 │   │                                                                                     [31m│
[31m│[39m [31m❱ [39m 990 │   │   [94mreturn[39m [96mself[39m._get_selection(indexer=indexer, out=out, fields=fields)               [31m│
[31m│[39m    991 │                                                                                         [31m│
[31m│[39m    992 │   [94mdef[39m [92mget_orthogonal_selection[39m([96mself[39m, selection, out=[94mNone[39m, fields=[94mNone[39m):                 [31m│
[31m│[39m    993 │   │   [33m"""Retrieve data by making a selection for each dimension of the array. For[39m       [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m /home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/zarr/[1mcore.py[22m:[94m1285[39m in          [31m│
[31m│[39m [92m_get_selection[39m                                                                                   [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m   1282 │   │   │   [94mfor[39m chunk_coords, chunk_selection, out_selection [95min[39m indexer:                  [31m│
[31m│[39m   1283 │   │   │   │                                                                             [31m│
[31m│[39m   1284 │   │   │   │   # load chunk selection into output array                                  [31m│
[31m│[39m [31m❱ [39m1285 │   │   │   │   [96mself[39m._chunk_getitem(chunk_coords, chunk_selection, out, out_selection,    [31m│
[31m│[39m   1286 │   │   │   │   │   │   │   │   │   drop_axes=indexer.drop_axes, fields=fields)           [31m│
[31m│[39m   1287 │   │   [94melse[39m:                                                                             [31m│
[31m│[39m   1288 │   │   │   # allow storage to get multiple items at once                                 [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m /home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/zarr/[1mcore.py[22m:[94m2006[39m in          [31m│
[31m│[39m [92m_chunk_getitem[39m                                                                                   [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m   2003 │   │   │   │   out[out_selection] = fill_value                                           [31m│
[31m│[39m   2004 │   │                                                                                     [31m│
[31m│[39m   2005 │   │   [94melse[39m:                                                                             [31m│
[31m│[39m [31m❱ [39m2006 │   │   │   [96mself[39m._process_chunk(out, cdata, chunk_selection, drop_axes,                   [31m│
[31m│[39m   2007 │   │   │   │   │   │   │   │   out_is_ndarray, fields, out_selection)                    [31m│
[31m│[39m   2008 │                                                                                         [31m│
[31m│[39m   2009 │   [94mdef[39m [92m_chunk_getitems[39m([96mself[39m, lchunk_coords, lchunk_selection, out, lout_selection,       [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m /home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/zarr/[1mcore.py[22m:[94m1949[39m in          [31m│
[31m│[39m [92m_process_chunk[39m                                                                                   [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m   1946 │   │   │   │   [94mreturn[39m                                                                    [31m│
[31m│[39m   1947 │   │   [94mexcept[39m ArrayIndexError:                                                           [31m│
[31m│[39m   1948 │   │   │   cdata = cdata.read_full()                                                     [31m│
[31m│[39m [31m❱ [39m1949 │   │   chunk = [96mself[39m._decode_chunk(cdata)                                                 [31m│
[31m│[39m   1950 │   │                                                                                     [31m│
[31m│[39m   1951 │   │   # select data from chunk                                                          [31m│
[31m│[39m   1952 │   │   [94mif[39m fields:                                                                        [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m /home/viktor/miniconda3/envs/torch-env/lib/python3.9/site-packages/zarr/[1mcore.py[22m:[94m2233[39m in          [31m│
[31m│[39m [92m_decode_chunk[39m                                                                                    [31m│
[31m│[39m                                                                                                  [31m│
[31m│[39m   2230 │   │   │   ) [95mand[39m [96mhasattr[39m([96mself[39m._compressor, [33m"decode_partial"[39m):                            [31m│
[31m│[39m   2231 │   │   │   │   chunk = [96mself[39m._compressor.decode_partial(cdata, start, nitems)             [31m│
[31m│[39m   2232 │   │   │   [94melse[39m:                                                                         [31m│
[31m│[39m [31m❱ [39m2233 │   │   │   │   chunk = [96mself[39m._compressor.decode(cdata)                                    [31m│
[31m│[39m   2234 │   │   [94melse[39m:                                                                             [31m│
[31m│[39m   2235 │   │   │   chunk = cdata                                                                 [31m│
[31m│[39m   2236                                                                                           [31m│
[31m╰──────────────────────────────────────────────────────────────────────────────────────────────────╯
[1mKeyboardInterrupt